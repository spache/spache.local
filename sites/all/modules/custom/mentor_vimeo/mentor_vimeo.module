<?php
/**
 * @file
 * Created new mentor_vimeo_field type using the Field Types API.
 */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function mentor_vimeo_field_info() {
  return array(
    'mentor_vimeo_field' => array(
      'label' => t('Vimeo video field'),
      'description' => t('Description'),
      'default_widget' => 'mentor_vimeo_field_widget',
      'default_formatter' => 'mentor_vimeo_field_formatter',
    ),
  );
}

/**
* Implements hook_field_validate().
*
* Check if video exist in https://vimeo.com by url from our field. If exist then take video id and save in drupal_static.
*/
function mentor_vimeo_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['mentor_vimeo_field'])) {
      $json_url = url('https://vimeo.com/api/oembed.json', array('query' => array('url' => rawurlencode($item['mentor_vimeo_field']))));
      $vimeo_video_id = mentor_vimeo_curl_get($json_url, FALSE);
      if (!isset($vimeo_video_id)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'mentor_vimeo_field_invalid',
          'message' => t('Wrong vimeo url'),
        );
      }
    }
  }
}


 /**
  * Implements hook_field_is_empty().
  */
function mentor_vimeo_field_is_empty($item, $field) {
  return empty($item['mentor_vimeo_field']);
}

/**
 * Implements hook_field_formatter_info().
 */
function mentor_vimeo_field_formatter_info() {
  return array(
    'mentor_vimeo_field_formatter' => array(
      'label' => t('Video thumbnail player'),
      'field types' => array('mentor_vimeo_field'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mentor_vimeo_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
  switch ($display['type']) {
    case 'mentor_vimeo_field_formatter':
      foreach ($items as $delta => $item) {
      	if ($item['mentor_vimeo_field'])
        $element[$delta] = array(
          '#type' => 'container',
          '#attributes' => array('class' => 'vimeo_field_wrapper'),
          'iframe_container' => array(
            '#type' => 'container',
            '#attributes' => array('class' => 'vimeo_field_video'),
            'iframe' => array(
              '#type' => 'html_tag',
              '#tag' => 'iframe',
              '#value' => '',
              '#attributes' => array(
                'src' => "//player.vimeo.com/video/" . $item['mentor_vimeo_field'],
                'height' => '200px',
                'frameborder' => '0',
                'webkitallowfullscreen' => '',
                'mozallowfullscreen' => '',
                'allowfullscreen' => '',
              ),
            ),
          ),
          'span' => array(
            '#type' => 'html_tag',
            '#tag' => 'span',
            '#attributes' => array('class' => 'vimeo_field_url'),
            '#value' => l('https://vimeo.com/' . $item['mentor_vimeo_field'], 'https://vimeo.com/' . $item['mentor_vimeo_field'], array('attributes' => array('target'=>'_blank'))),
          ),
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function mentor_vimeo_field_widget_info() {
  return array(
    'mentor_vimeo_field_widget' => array(
      'label' => t('Vimeo video url'),
      'field types' => array('mentor_vimeo_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function mentor_vimeo_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  if ($instance['widget']['type'] == 'mentor_vimeo_field_widget') {
    $element['mentor_vimeo_field'] = array(
      '#type' => 'textfield',
      '#title' => $element['#title'],
      '#default_value' => isset($items[$delta]['mentor_vimeo_field']) ? 'https://vimeo.com/' . $items[$delta]['mentor_vimeo_field'] : '',
      '#size' => 60,
      '#delta' => $delta,
      '#required' => 1,
    );
  }
  return $element;
}

/**
 * Implements hook_field_presave().
 *
 * For saving only vimeo video id in database.
 */
function mentor_vimeo_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as $delta => $item) {
    $json_url = url('https://vimeo.com/api/oembed.json', array('query' => array('url' => rawurlencode($items[$delta]['mentor_vimeo_field']))));
    $items[$delta]['mentor_vimeo_field'] = mentor_vimeo_curl_get($json_url, TRUE);
  }
}

/**
 * Implements hook_field_widget_error().
 */
function mentor_vimeo_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'mentor_vimeo_field_invalid') {
    form_error($element, $error['message']);
  }
}

/**
 * Get vimeo video id by url.
 */
function mentor_vimeo_curl_get($url, $reset) {
  $vimeo_json_object = &drupal_static(__FUNCTION__, NULL, $reset);
  if (!isset($vimeo_json)) {
    $curl = curl_init($url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_TIMEOUT, 30);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
    $vimeo_json = curl_exec($curl);
    curl_close($curl);
    $vimeo_json_object = json_decode($vimeo_json);
  }
  return $vimeo_json_object->video_id;
}
